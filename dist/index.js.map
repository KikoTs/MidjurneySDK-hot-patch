{
  "version": 3,
  "sources": ["../src/command.ts", "../src/utils.ts", "../src/api.ts", "../src/config.ts", "../src/ws.ts", "../src/msgMap.ts", "../src/midjourney.ts"],
  "sourcesContent": ["import { ApplicationCommond, MidJourneyFullOptions } from './types'\n\nexport const Commands = [\n  'ask',\n  'blend',\n  'describe',\n  'fast',\n  'help',\n  'imagine',\n  'info',\n  'prefer',\n  'private',\n  'public',\n  'relax',\n  'settings',\n  'show',\n  'stealth',\n  'shorten',\n  'subscribe'\n] as const\n\nexport type CommandName = (typeof Commands)[number]\n\nexport class MidjourneyCommand {\n  constructor(public opts: MidJourneyFullOptions) {}\n  private commandCaches: Partial<Record<CommandName, ApplicationCommond>> = {}\n\n  getCommand(query: CommandName) {\n    if (!this.commandCaches[query]) {\n      const searchParams = new URLSearchParams({\n        type: '1',\n        query,\n        limit: '1',\n        include_applications: 'false'\n      })\n      return this.opts\n        .fetch(\n          `${this.opts.apiBaseUrl}/api/v9/channels/${this.opts.channel_id}/application-commands/search?${searchParams}`,\n          {\n            headers: { authorization: this.opts.token }\n          }\n        )\n        .then((res) => res.json())\n        .then(({ application_commands }) => {\n          if (application_commands.length) {\n            this.commandCaches[query] = application_commands[0]\n            return this.commandCaches[query]\n          } else {\n            return Promise.reject('command not found')\n          }\n        })\n    }\n    return Promise.resolve(this.commandCaches[query])\n  }\n}\n", "import { Snowyflake, Epoch } from 'snowyflake'\nimport chalk from 'chalk'\nimport { MjOriginMessage } from './types'\n\nconst snowflake = new Snowyflake({\n  workerId: 0n,\n  processId: 0n,\n  epoch: Epoch.Discord\n})\n\nexport function debug(...scopes: string[]) {\n  return (...args: any) =>\n    console.log(\n      chalk.red(scopes.map((scope) => `[${scope}]`).join(' ')),\n      ...args\n    )\n}\n\nexport const nextNonce = (): string => snowflake.nextId().toString()\n\nexport const formatComponents = (components: MjOriginMessage['components']) => {\n  return components\n    .map((v) => ({\n      ...v,\n      components: v.components.filter((v) => v.custom_id && v.type === 2)\n    }))\n    .filter((v) => v.components.length)\n}\n\nexport const matchRegionNonce = (content: string) =>\n  content.match(/\\*\\*regionNonce:\\s(\\d+?),\\s/)?.[1]\n", "import { MidjourneyCommand } from './command'\nimport {\n  MessageCallBack,\n  MidJourneyFullOptions,\n  MjOriginMessage\n} from './types'\nimport { nextNonce } from './utils'\n\nexport class MidjourneyApi extends MidjourneyCommand {\n  constructor(public opts: MidJourneyFullOptions) {\n    super(opts)\n  }\n\n  private interactions(payload: any, cb?: MessageCallBack) {\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: this.opts.token\n    }\n    return this.opts\n      .fetch(`${this.opts.apiBaseUrl}/api/v9/interactions`, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers\n      })\n      .then((res) =>\n        res.ok\n          ? cb?.('REQUEST_SUCCESS', res as any)\n          : cb?.('REQUEST_FAILED', res as any)\n      )\n      .catch((err) => cb?.('REQUEST_FAILED', err))\n  }\n\n  private getPayload(\n    type: number,\n    data: any,\n    others: any = {},\n    nonce = nextNonce()\n  ) {\n    if (!this.opts.session_id) {\n      throw new Error('please invoke `init` method before every operate')\n    }\n    return Object.assign(\n      {\n        type,\n        application_id: '936929561302675456',\n        guild_id: this.opts.guild_id,\n        channel_id: this.opts.channel_id,\n        session_id: this.opts.session_id,\n        nonce,\n        data\n      },\n      others\n    )\n  }\n\n  private inpaint(\n    customId: string,\n    prompt: string,\n    mask: string,\n    cb?: MessageCallBack\n  ) {\n    const headers = {\n      'Content-Type': 'application/json'\n    }\n    return this.opts\n      .fetch(`${this.opts.discordsaysUrl}/inpaint/api/submit-job`, {\n        method: 'POST',\n        body: JSON.stringify({\n          customId,\n          prompt,\n          mask: mask.replace(/^data:.+?;base64,/, ''),\n          userId: '0',\n          username: '0',\n          full_prompt: null\n        }),\n        headers\n      })\n      .then((res) =>\n        res.ok\n          ? cb?.('REQUEST_SUCCESS', res as any)\n          : cb?.('REQUEST_FAILED', res as any)\n      )\n      .catch((err) => cb?.('REQUEST_FAILED', err))\n  }\n\n  async imagine(value: string, cb?: MessageCallBack) {\n    return this.getCommand('imagine').then((command) => {\n      const payload = this.getPayload(\n        2,\n        Object.assign(command!, {\n          options: [{ ...command?.options[0], value }]\n        })\n      )\n      return Promise.all([\n        this.interactions(payload, cb),\n        this.opts.ws?.waitMessage({ nonce: payload.nonce, cb })\n      ]).then(([_, res]) => res)\n    })\n  }\n\n  action(\n    message_id: string,\n    custom_id: string,\n    message_flags: number,\n    cb?: MessageCallBack\n  ) {\n    const payload = this.getPayload(\n      3,\n      {\n        component_type: 2,\n        custom_id\n      },\n      {\n        message_flags,\n        message_id\n      }\n    )\n    return Promise.all([\n      this.interactions(payload, cb),\n      this.opts.ws?.waitMessage({\n        nonce: payload.nonce,\n        cb,\n        parentId: message_id\n      })\n    ]).then(([_, res]) => res)\n  }\n\n  remixSubmit(\n    id: string,\n    custom_id: string,\n    components: MjOriginMessage['components'],\n    cb?: MessageCallBack\n  ) {\n    const payload = this.getPayload(5, {\n      id,\n      custom_id,\n      components\n    })\n    return Promise.all([\n      this.interactions(payload, cb),\n      this.opts.ws?.waitMessage({\n        nonce: payload.nonce,\n        cb\n      })\n    ]).then(([_, res]) => res)\n  }\n\n  varyRegion(\n    customId: string,\n    prompt: string,\n    mask: string,\n    cb?: MessageCallBack\n  ) {\n    const nonce = nextNonce()\n    return Promise.all([\n      this.inpaint(customId, `regionNonce: ${nonce}, ${prompt}`, mask, cb),\n      this.opts.ws?.waitMessage({ nonce, cb })\n    ]).then(([_, msg]) => msg)\n  }\n\n  info(cb?: MessageCallBack) {\n    return this.getCommand('info').then((command) => {\n      const payload = this.getPayload(2, command)\n      return Promise.all([\n        this.interactions(payload, cb),\n        this.opts.ws?.waitMessage({ nonce: payload.nonce, cb })\n      ]).then(([_, msg]) => msg)\n    })\n  }\n\n  settings(cb?: MessageCallBack) {\n    return this.getCommand('settings').then((command) => {\n      const payload = this.getPayload(2, command)\n      return Promise.all([\n        this.interactions(payload, cb),\n        this.opts.ws?.waitMessage({ nonce: payload.nonce, cb })\n      ]).then(([_, msg]) => msg)\n    })\n  }\n\n  fast(cb?: MessageCallBack) {\n    return this.getCommand('fast').then((command) => {\n      const payload = this.getPayload(2, command)\n      return Promise.all([\n        this.interactions(payload, cb),\n        this.opts.ws?.waitMessage({ nonce: payload.nonce, cb })\n      ]).then(([_, msg]) => msg)\n    })\n  }\n\n  relax(cb?: MessageCallBack) {\n    return this.getCommand('relax').then((command) => {\n      const payload = this.getPayload(2, command)\n      return Promise.all([\n        this.interactions(payload, cb),\n        this.opts.ws?.waitMessage({ nonce: payload.nonce, cb })\n      ]).then(([_, msg]) => msg)\n    })\n  }\n}\n", "import { MidJourneyOptions } from './types'\nimport fetch from 'isomorphic-fetch'\nimport { debug } from './utils'\n\nexport const defaultOpts = {\n  apiBaseUrl: 'https://discord.com',\n  wsBaseUrl: 'wss://gateway.discord.gg/?encoding=json&v=9',\n  imgBaseUrl: 'https://cdn.discordapp.com',\n  debug,\n  fetch,\n  skipHeartbeat: false,\n  discordsaysUrl:\n    typeof document === 'undefined'\n      ? 'https://936929561302675456.discordsays.com'\n      : ''\n}\n", "import EventEmitter from 'eventemitter3'\nimport WebSocket from 'isomorphic-ws'\nimport {\n  MessageCallBack,\n  MidJourneyFullOptions,\n  MjEvents,\n  MjMessage,\n  MjMsgType,\n  MjOriginMessage\n} from './types'\nimport { MidjourneyMsgMap } from './msgMap'\nimport { formatComponents, matchRegionNonce } from './utils'\n\nexport class MidjourneyWs extends EventEmitter<MjEvents> {\n  wsClient: WebSocket\n  private lastSequence: number | null = null\n  private heartbeatTask: NodeJS.Timer | null = null\n  private reconnectionTask: NodeJS.Timeout | null = null\n  private msgMap = new MidjourneyMsgMap()\n\n  constructor(public opts: MidJourneyFullOptions) {\n    super()\n    this.wsClient = this.connect()\n  }\n\n  private connect() {\n    if (!this.opts.wsBaseUrl) throw new Error(\"wsBaseUrl can't be empty\")\n    const wsClient = new WebSocket(this.opts.wsBaseUrl)\n    wsClient.addEventListener('open', () => {\n      this.emit('WS_OPEN')\n      this.opts.debug?.('MidjourneyWs', 'connect')('wsClient is open!')\n      if (this.reconnectionTask) {\n        clearTimeout(this.reconnectionTask)\n        this.reconnectionTask = null\n      }\n    })\n    wsClient.addEventListener('message', this.message.bind(this))\n    wsClient.addEventListener('error', (err) => {\n      this.emit('WS_ERROR', err.message)\n      this.opts.debug?.(\n        'MidjourneyWs',\n        'connect'\n      )(`discord wsClient occurred an error: ${err.message}`)\n      this.wsClient.close()\n    })\n    wsClient.addEventListener('close', ({ code, reason }) => {\n      this.emit('WS_CLOSE')\n      this.opts.debug?.(\n        'MidjourneyWs',\n        'connect'\n      )(\n        `discord wsClient was close, error code: ${code}, error reason: ${reason}`\n      )\n      if (code === 4004) {\n        // Authorization faild\n        this.emit('READY', new Error(reason))\n      } else {\n        this.reconnectionTask = setTimeout(() => {\n          this.opts.debug?.(\n            'MidjourneyWs',\n            'connect'\n          )('discord wsClient reconnect...')\n          if (this.heartbeatTask && typeof this.heartbeatTask === 'number') {\n            clearInterval(this.heartbeatTask)\n            this.heartbeatTask = null\n          }\n          this.wsClient = this.connect.call(this)\n        }, 4000)\n      }\n    })\n    return wsClient\n  }\n\n  private auth() {\n    this.wsClient.send(\n      JSON.stringify({\n        op: 2,\n        d: {\n          token: this.opts.token,\n          capabilities: 16381,\n          properties: {\n            os: 'Mac OS X',\n            browser: 'Chrome',\n            device: ''\n          },\n          compress: false\n        }\n      })\n    )\n  }\n\n  private heartbeat(interval: number) {\n    const nextInterval = interval * Math.random()\n    !this.opts.skipHeartbeat &&\n      this.opts.debug?.(\n        'MidjourneyWs',\n        'heartbeat'\n      )(`send discord heartbeat after ${Math.round(nextInterval / 1000)}s`)\n    this.heartbeatTask = setTimeout(() => {\n      if (this.wsClient.readyState === WebSocket.OPEN) {\n        this.wsClient.send(\n          JSON.stringify({\n            op: 1,\n            d: this.lastSequence\n          })\n        )\n        this.heartbeat(interval)\n      }\n    }, nextInterval)\n  }\n\n  private message(e: WebSocket.MessageEvent) {\n    const payload = JSON.parse(e.data as string)\n    const data = payload.d as MjOriginMessage\n    const type = payload.t as MjMsgType\n    const seq = payload.s as number\n    const operate = payload.op as number\n    seq && (this.lastSequence = seq)\n    this.opts.debug?.(\n      'MidjourneyWs',\n      'message'\n    )(\n      [\n        { label: 'MessageType', value: type },\n        { label: 'MessageOpCode', value: operate }\n      ]\n        .filter((v) => !!v.value)\n        .map((v) => `${v.label}: ${v.value}`)\n        .join(', ')\n    )\n    if (operate === 10) {\n      this.heartbeat(data.heartbeat_interval!)\n      this.auth()\n    }\n    if (type === 'READY') {\n      this.opts.session_id = data.session_id\n      this.opts.user = data.user\n      this.opts.debug?.(\n        'MidjourneyWs',\n        'message'\n      )('wsClient connect successfully!')\n      this.emit('READY', data.user)\n    }\n    if (\n      type === 'MESSAGE_CREATE' ||\n      type === 'MESSAGE_UPDATE' ||\n      type === 'MESSAGE_DELETE' ||\n      type === 'INTERACTION_IFRAME_MODAL_CREATE' ||\n      type === 'INTERACTION_MODAL_CREATE'\n    ) {\n      this.handleMessage(type, data)\n    }\n    if (operate === 11) {\n      !this.opts.skipHeartbeat &&\n        this.opts.debug?.('MidjourneyWs', 'message')('discord heartbeat ack!')\n    }\n  }\n\n  private handleMessage(type: MjMsgType, message: MjOriginMessage) {\n    if (message.channel_id !== this.opts.channel_id) return\n    if (\n      type === 'MESSAGE_CREATE' ||\n      type === 'INTERACTION_IFRAME_MODAL_CREATE' ||\n      type === 'INTERACTION_MODAL_CREATE'\n    )\n      this.handleMessageCreate(type, message)\n    else if (type === 'MESSAGE_UPDATE')\n      this.handleMessageUpdate('MESSAGE_UPDATE', message)\n    else this.handleMessageDelete(message)\n  }\n\n  private handleMessageCreate(type: MjMsgType, message: MjOriginMessage) {\n    let {\n      nonce,\n      id,\n      embeds = [],\n      custom_id,\n      content,\n      attachments = [],\n      components\n    } = message\n    nonce = nonce || matchRegionNonce(content)\n    if (nonce && !attachments.length) {\n      this.msgMap.updateMsgByNonce(id, nonce)\n      if (embeds[0]) {\n        const { color } = embeds[0]\n        switch (color) {\n          case 16711680:\n            this.emitEmbed(id, 'MESSAGE_CREATE', embeds[0])\n            break\n          default:\n            break\n        }\n      }\n      if (type === 'INTERACTION_IFRAME_MODAL_CREATE' && custom_id) {\n        custom_id = custom_id.split('::')[2]\n        let varyRegionPrompt = ''\n        // you need to configure the frontend proxy if you in the browser environment, you can see the proxy detail in `packages/playground/vite.config.ts` file.\n        return this.opts\n          .fetch(\n            `${this.opts.discordsaysUrl}/inpaint/api/get-image-info/0/0/${custom_id}`\n          )\n          .then(async (res) => {\n            if (res.ok) {\n              const json = await res.json()\n              varyRegionPrompt = json.prompt\n              const varyRegionImgBase64 = await fetch(\n                `${this.opts.discordsaysUrl}/inpaint${json.image_url?.replace(\n                  /^\\./,\n                  ''\n                )}`\n              )\n                .then((res) => res.blob())\n                .then(\n                  (blob) =>\n                    new Promise<FileReader['result']>((resolve, reject) => {\n                      const reader = new FileReader()\n                      reader.onload = (e) =>\n                        e.target && resolve(e.target.result)\n                      reader.onerror = reject\n                      reader.readAsDataURL(blob)\n                    })\n                )\n              this.emitNonce(nonce!, type, {\n                custom_id,\n                varyRegionPrompt,\n                varyRegionImgBase64: varyRegionImgBase64 as string\n              })\n            }\n          })\n      }\n      if (\n        type === 'INTERACTION_MODAL_CREATE' &&\n        custom_id &&\n        components.length\n      ) {\n        this.emitNonce(nonce, type, {\n          id,\n          custom_id,\n          components\n        })\n      }\n    }\n    this.handleMessageUpdate('MESSAGE_CREATE', message)\n  }\n\n  private handleMessageUpdate(type: MjMsgType, message: MjOriginMessage) {\n    const {\n      content,\n      interaction = {} as MjOriginMessage['interaction'],\n      nonce,\n      flags,\n      components = [],\n      embeds = [],\n      id\n    } = message\n    if (!nonce) {\n      const { name } = interaction\n      const msg = this.msgMap.getMsgById(id)\n      if (msg && msg.nonce) {\n        switch (name) {\n          case 'settings':\n            this.emitNonce(msg.nonce, type, {\n              id,\n              flags,\n              components: formatComponents(components),\n              progress: 100\n            })\n            return\n          case 'info':\n            embeds.at(0) &&\n              this.emitNonce(msg.nonce, type, {\n                id,\n                embed: embeds[0],\n                progress: 100\n              })\n            return\n        }\n      }\n    }\n    if (content) {\n      this.processingImage(type, message)\n    }\n  }\n\n  private handleMessageDelete({ id }: MjOriginMessage) {\n    this.emitNonce(id, 'MESSAGE_DELETE', { id }, true)\n  }\n\n  private processingImage(type: MjMsgType, message: MjOriginMessage) {\n    const {\n      content,\n      id,\n      attachments = [],\n      flags,\n      components = [],\n      nonce,\n      timestamp,\n      message_reference = {} as MjOriginMessage['message_reference']\n    } = message\n    const { message_id: parentId } = message_reference\n    let msg =\n      this.msgMap.getMsgById(id) ||\n      (parentId\n        ? this.msgMap.getMsgByparentId(parentId)\n        : this.msgMap.getMsgByContent(content))\n    if (!msg?.nonce) return\n    let url = attachments.at(0)?.url\n    if (url && this.opts.imgBaseUrl) {\n      url = url.replace('https://cdn.discordapp.com', this.opts.imgBaseUrl)\n    }\n    const progressMatch = content.match(/\\((\\d+?)%\\)\\s\\(\\w+?\\)/)?.[1]\n    const isNewCreateMsg =\n      !nonce &&\n      attachments.length &&\n      components.length &&\n      type === 'MESSAGE_CREATE'\n    const progress = isNewCreateMsg\n      ? 100\n      : progressMatch\n      ? parseInt(progressMatch)\n      : 0\n    const originId = msg.id !== id ? msg.id : undefined\n    const mjMsg = JSON.parse(\n      JSON.stringify({\n        id,\n        url,\n        originId,\n        content: content.replace(/^\\*\\*regionNonce:\\s\\d+?,\\s/, '**'),\n        parentId,\n        flags,\n        components: formatComponents(components),\n        progress,\n        timestamp\n      })\n    )\n    this.emitNonce(msg.nonce, type, mjMsg)\n  }\n\n  private emitNonce(\n    idOrNonce: string,\n    type: MjMsgType,\n    msg: Partial<MjMessage>,\n    isDel = false\n  ) {\n    const emitMsg =\n      this.msgMap.get(idOrNonce) ||\n      this.msgMap.getMsgById(idOrNonce) ||\n      this.msgMap.getMsgByOriginId(idOrNonce)\n    emitMsg &&\n      emitMsg.nonce &&\n      this.emit(\n        emitMsg.nonce,\n        type,\n        isDel ? (msg as MjMessage) : Object.assign({}, emitMsg, msg)\n      )\n  }\n\n  private emitEmbed(id: string, type: MjMsgType, embed: MjMessage['embed']) {\n    const msg = this.msgMap.getMsgById(id)\n    if (!msg || !msg.nonce) return\n    msg.embed = embed\n    this.emitNonce(msg.nonce, type, msg)\n  }\n\n  waitReady() {\n    return new Promise<MjOriginMessage['user']>((s, j) => {\n      this.once('READY', (res) => (res instanceof Error ? j(res) : s(res)))\n    })\n  }\n\n  waitMessage({\n    nonce,\n    parentId,\n    cb\n  }: {\n    nonce: string\n    parentId?: string\n    cb?: MessageCallBack\n  }) {\n    this.msgMap.set(nonce, { id: '', nonce })\n    const parentMsg = parentId && this.msgMap.getMsgById(parentId)\n    return new Promise<MjMessage>((s, j) => {\n      parentMsg &&\n        parentMsg.nonce &&\n        this.once(parentMsg.nonce, (type, msg) => {\n          cb?.(type, msg)\n          this.off(parentMsg.nonce!)\n        })\n      this.on(nonce, (type, msg) => {\n        cb?.(type, msg)\n        if (type === 'MESSAGE_DELETE' && msg.id) {\n          const final = this.msgMap.getMsgByOriginId(msg.id)\n          final && this.off(nonce) && s(final)\n          return\n        }\n        if (\n          type === 'INTERACTION_IFRAME_MODAL_CREATE' ||\n          type === 'INTERACTION_MODAL_CREATE'\n        ) {\n          this.off(nonce)\n          return\n        }\n        this.msgMap.set(nonce, msg)\n        if (msg.error) {\n          this.off(nonce)\n          j(msg.error)\n          return\n        }\n      })\n    })\n  }\n}\n", "import { MjMessage } from './types'\n\nexport class MidjourneyMsgMap extends Map<MjMessage['nonce'], MjMessage> {\n  updateMsgByNonce(id: string, nonce: string) {\n    let msg = this.get(nonce)\n    if (!msg) return\n    msg.id = id\n  }\n\n  getMsgById(id: string) {\n    return Array.from(this.entries()).find(([_, v]) => v.id === id)?.[1]\n  }\n\n  getMsgByparentId(parentId: string) {\n    return Array.from(this.entries()).find(\n      ([_, v]) => v.parentId === parentId && v.progress !== 100\n    )?.[1]\n  }\n\n  getMsgByOriginId(originId: string) {\n    return Array.from(this.entries()).find(\n      ([_, v]) => v.originId === originId\n    )?.[1]\n  }\n\n  getMsgByContent(content: string) {\n    const RE = /\\*\\*(.+?)\\*\\*/\n    const match = content?.match(RE)\n    return Array.from(this.entries()).find(\n      ([_, v]) =>\n        match && match[1] === v.content?.match(RE)?.[1] && v.progress !== 100\n    )?.[1]\n  }\n\n  getVaryMsgByContent(content: string) {\n    const RE = /\\*\\*regionNonce:\\s(\\d+?),\\s/\n    const regionNonce = content?.match(RE)?.[1]\n    return this.get(regionNonce)\n  }\n}\n", "import { MidjourneyApi } from './api'\nimport { defaultOpts } from './config'\nimport { MidJourneyFullOptions, MidJourneyOptions } from './types'\nimport { MidjourneyWs } from './ws'\n\nexport class MidJourney {\n  api: MidjourneyApi\n  private opts: MidJourneyFullOptions\n  constructor(opts: MidJourneyOptions) {\n    if (!opts.token || !opts.channel_id || !opts.guild_id) {\n      throw new Error('`token`\u3001`channel_id` and `guild_id` are required')\n    }\n    this.opts = Object.assign({}, defaultOpts, opts) as MidJourneyFullOptions\n    if (!this.opts.apiBaseUrl) this.opts.apiBaseUrl = defaultOpts.apiBaseUrl\n    if (!this.opts.wsBaseUrl) this.opts.wsBaseUrl = defaultOpts.wsBaseUrl\n    if (!this.opts.imgBaseUrl) this.opts.imgBaseUrl = defaultOpts.imgBaseUrl\n    this.api = new MidjourneyApi(this.opts)\n  }\n\n  async init() {\n    this.opts.ws = new MidjourneyWs(this.opts)\n    await this.opts.ws.waitReady()\n    return this\n  }\n\n  get initialize() {\n    return this.opts.ws?.wsClient.readyState === 1\n  }\n\n  get user() {\n    return this.opts.user\n  }\n}\n"],
  "mappings": "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",
  "names": ["v", "fetch", "fetch", "res"]
}
